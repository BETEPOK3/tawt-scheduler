// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        (unknown)
// source: scheduler/types.proto

package scheduler

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	structpb "google.golang.org/protobuf/types/known/structpb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Status - статус задачи.
type Task_Status int32

const (
	// TASK_STATUS_UNSPECIFIED - статус не указан.
	Task_TASK_STATUS_UNSPECIFIED Task_Status = 0
	// QUEUED - статус "добавлена в очередь".
	Task_QUEUED Task_Status = 1
	// IN_PROGRESS - статус "в процессе обработки".
	Task_IN_PROGRESS Task_Status = 2
	// COMPLETED - статус "заверешена".
	Task_COMPLETED Task_Status = 3
	// ERROR - статус "обработана с ошибкой".
	Task_ERROR Task_Status = 4
)

// Enum value maps for Task_Status.
var (
	Task_Status_name = map[int32]string{
		0: "TASK_STATUS_UNSPECIFIED",
		1: "QUEUED",
		2: "IN_PROGRESS",
		3: "COMPLETED",
		4: "ERROR",
	}
	Task_Status_value = map[string]int32{
		"TASK_STATUS_UNSPECIFIED": 0,
		"QUEUED":                  1,
		"IN_PROGRESS":             2,
		"COMPLETED":               3,
		"ERROR":                   4,
	}
)

func (x Task_Status) Enum() *Task_Status {
	p := new(Task_Status)
	*p = x
	return p
}

func (x Task_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Task_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_scheduler_types_proto_enumTypes[0].Descriptor()
}

func (Task_Status) Type() protoreflect.EnumType {
	return &file_scheduler_types_proto_enumTypes[0]
}

func (x Task_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Task_Status.Descriptor instead.
func (Task_Status) EnumDescriptor() ([]byte, []int) {
	return file_scheduler_types_proto_rawDescGZIP(), []int{0, 0}
}

// Task - сущность задачи.
type Task struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// id - идентификатор задачи.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// type - тип задачи с параметрами.
	Type *TaskType `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	// input - входные данные задачи.
	Input []byte `protobuf:"bytes,3,opt,name=input,proto3" json:"input,omitempty"`
	// input - выходные данные задачи.
	Output []byte `protobuf:"bytes,4,opt,name=output,proto3,oneof" json:"output,omitempty"`
	// created_at - дата и время создания задачи.
	CreatedAt string `protobuf:"bytes,5,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	// finished_at - дата и время окончания обработки задачи.
	FinishedAt *string `protobuf:"bytes,6,opt,name=finished_at,json=finishedAt,proto3,oneof" json:"finished_at,omitempty"`
	// status - статус задачи.
	Status Task_Status `protobuf:"varint,7,opt,name=status,proto3,enum=scheduler.Task_Status" json:"status,omitempty"`
	// error - описание возможной ошибки обработки.
	Error *string `protobuf:"bytes,8,opt,name=error,proto3,oneof" json:"error,omitempty"`
}

func (x *Task) Reset() {
	*x = Task{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scheduler_types_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Task) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Task) ProtoMessage() {}

func (x *Task) ProtoReflect() protoreflect.Message {
	mi := &file_scheduler_types_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Task.ProtoReflect.Descriptor instead.
func (*Task) Descriptor() ([]byte, []int) {
	return file_scheduler_types_proto_rawDescGZIP(), []int{0}
}

func (x *Task) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Task) GetType() *TaskType {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *Task) GetInput() []byte {
	if x != nil {
		return x.Input
	}
	return nil
}

func (x *Task) GetOutput() []byte {
	if x != nil {
		return x.Output
	}
	return nil
}

func (x *Task) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *Task) GetFinishedAt() string {
	if x != nil && x.FinishedAt != nil {
		return *x.FinishedAt
	}
	return ""
}

func (x *Task) GetStatus() Task_Status {
	if x != nil {
		return x.Status
	}
	return Task_TASK_STATUS_UNSPECIFIED
}

func (x *Task) GetError() string {
	if x != nil && x.Error != nil {
		return *x.Error
	}
	return ""
}

// TaskType - тип задачи.
type TaskType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// specific - определённый тип.
	//
	// Types that are assignable to Specific:
	//
	//	*TaskType_Graphematical
	//	*TaskType_Gamma
	Specific isTaskType_Specific `protobuf_oneof:"specific"`
}

func (x *TaskType) Reset() {
	*x = TaskType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scheduler_types_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskType) ProtoMessage() {}

func (x *TaskType) ProtoReflect() protoreflect.Message {
	mi := &file_scheduler_types_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskType.ProtoReflect.Descriptor instead.
func (*TaskType) Descriptor() ([]byte, []int) {
	return file_scheduler_types_proto_rawDescGZIP(), []int{1}
}

func (m *TaskType) GetSpecific() isTaskType_Specific {
	if m != nil {
		return m.Specific
	}
	return nil
}

func (x *TaskType) GetGraphematical() *TaskTypeGraphematical {
	if x, ok := x.GetSpecific().(*TaskType_Graphematical); ok {
		return x.Graphematical
	}
	return nil
}

func (x *TaskType) GetGamma() *TaskTypeGamma {
	if x, ok := x.GetSpecific().(*TaskType_Gamma); ok {
		return x.Gamma
	}
	return nil
}

type isTaskType_Specific interface {
	isTaskType_Specific()
}

type TaskType_Graphematical struct {
	// graphematical - тип задачи "графематический анализ".
	Graphematical *TaskTypeGraphematical `protobuf:"bytes,1,opt,name=graphematical,proto3,oneof"`
}

type TaskType_Gamma struct {
	// gamma - тип задачи "граф. + морфологический анализ".
	Gamma *TaskTypeGamma `protobuf:"bytes,2,opt,name=gamma,proto3,oneof"`
}

func (*TaskType_Graphematical) isTaskType_Specific() {}

func (*TaskType_Gamma) isTaskType_Specific() {}

// TaskTypeGraphematical - тип задачи "графематический анализ".
type TaskTypeGraphematical struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *TaskTypeGraphematical) Reset() {
	*x = TaskTypeGraphematical{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scheduler_types_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskTypeGraphematical) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskTypeGraphematical) ProtoMessage() {}

func (x *TaskTypeGraphematical) ProtoReflect() protoreflect.Message {
	mi := &file_scheduler_types_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskTypeGraphematical.ProtoReflect.Descriptor instead.
func (*TaskTypeGraphematical) Descriptor() ([]byte, []int) {
	return file_scheduler_types_proto_rawDescGZIP(), []int{2}
}

// TaskTypeGamma - тип задачи "граф. + морфологический анализ".
type TaskTypeGamma struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *TaskTypeGamma) Reset() {
	*x = TaskTypeGamma{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scheduler_types_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskTypeGamma) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskTypeGamma) ProtoMessage() {}

func (x *TaskTypeGamma) ProtoReflect() protoreflect.Message {
	mi := &file_scheduler_types_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskTypeGamma.ProtoReflect.Descriptor instead.
func (*TaskTypeGamma) Descriptor() ([]byte, []int) {
	return file_scheduler_types_proto_rawDescGZIP(), []int{3}
}

// CreateTask - DTO создания задачи.
type CreateTask struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// type - тип задачи с параметрами.
	Type *TaskType `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	// input - входные данные задачи.
	Input []byte `protobuf:"bytes,2,opt,name=input,proto3" json:"input,omitempty"`
	// priority - приоритет задачи.
	Priority uint32 `protobuf:"varint,3,opt,name=priority,proto3" json:"priority,omitempty"`
}

func (x *CreateTask) Reset() {
	*x = CreateTask{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scheduler_types_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTask) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTask) ProtoMessage() {}

func (x *CreateTask) ProtoReflect() protoreflect.Message {
	mi := &file_scheduler_types_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTask.ProtoReflect.Descriptor instead.
func (*CreateTask) Descriptor() ([]byte, []int) {
	return file_scheduler_types_proto_rawDescGZIP(), []int{4}
}

func (x *CreateTask) GetType() *TaskType {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *CreateTask) GetInput() []byte {
	if x != nil {
		return x.Input
	}
	return nil
}

func (x *CreateTask) GetPriority() uint32 {
	if x != nil {
		return x.Priority
	}
	return 0
}

// TaskStreamData - DTO данных задачи, необходимых для её обработки.
type TaskStreamData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// id - идентификатор задачи.
	TaskId string `protobuf:"bytes,1,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	// type - тип задачи с параметрами.
	Type *TaskType `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	// input - входные данные задачи.
	Input *structpb.Struct `protobuf:"bytes,3,opt,name=input,proto3" json:"input,omitempty"`
}

func (x *TaskStreamData) Reset() {
	*x = TaskStreamData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scheduler_types_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskStreamData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskStreamData) ProtoMessage() {}

func (x *TaskStreamData) ProtoReflect() protoreflect.Message {
	mi := &file_scheduler_types_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskStreamData.ProtoReflect.Descriptor instead.
func (*TaskStreamData) Descriptor() ([]byte, []int) {
	return file_scheduler_types_proto_rawDescGZIP(), []int{5}
}

func (x *TaskStreamData) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

func (x *TaskStreamData) GetType() *TaskType {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *TaskStreamData) GetInput() *structpb.Struct {
	if x != nil {
		return x.Input
	}
	return nil
}

// EditTask - DTO редактирования данных задачи.
type EditTask struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// id - идентификатор задачи.
	TaskId string `protobuf:"bytes,1,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	// output - выходные данные задачи.
	Output *structpb.Struct `protobuf:"bytes,2,opt,name=output,proto3,oneof" json:"output,omitempty"`
}

func (x *EditTask) Reset() {
	*x = EditTask{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scheduler_types_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EditTask) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EditTask) ProtoMessage() {}

func (x *EditTask) ProtoReflect() protoreflect.Message {
	mi := &file_scheduler_types_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EditTask.ProtoReflect.Descriptor instead.
func (*EditTask) Descriptor() ([]byte, []int) {
	return file_scheduler_types_proto_rawDescGZIP(), []int{6}
}

func (x *EditTask) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

func (x *EditTask) GetOutput() *structpb.Struct {
	if x != nil {
		return x.Output
	}
	return nil
}

var File_scheduler_types_proto protoreflect.FileDescriptor

var file_scheduler_types_proto_rawDesc = []byte{
	0x0a, 0x15, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2f, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x09, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x72, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0x85, 0x03, 0x0a, 0x04, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x27, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x72, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x1b, 0x0a, 0x06, 0x6f, 0x75, 0x74, 0x70,
	0x75, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x06, 0x6f, 0x75, 0x74, 0x70,
	0x75, 0x74, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x61, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x12, 0x24, 0x0a, 0x0b, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64,
	0x5f, 0x61, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0a, 0x66, 0x69, 0x6e,
	0x69, 0x73, 0x68, 0x65, 0x64, 0x41, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2e, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x73, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x19, 0x0a, 0x05, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x05, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x88, 0x01, 0x01, 0x22, 0x5c, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x1b, 0x0a, 0x17, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55,
	0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06,
	0x51, 0x55, 0x45, 0x55, 0x45, 0x44, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x49, 0x4e, 0x5f, 0x50,
	0x52, 0x4f, 0x47, 0x52, 0x45, 0x53, 0x53, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x4f, 0x4d,
	0x50, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10, 0x03, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x52, 0x52, 0x4f,
	0x52, 0x10, 0x04, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x42, 0x0e,
	0x0a, 0x0c, 0x5f, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x42, 0x08,
	0x0a, 0x06, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x92, 0x01, 0x0a, 0x08, 0x54, 0x61, 0x73,
	0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x48, 0x0a, 0x0d, 0x67, 0x72, 0x61, 0x70, 0x68, 0x65, 0x6d,
	0x61, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x73,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x54, 0x79, 0x70,
	0x65, 0x47, 0x72, 0x61, 0x70, 0x68, 0x65, 0x6d, 0x61, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x48, 0x00,
	0x52, 0x0d, 0x67, 0x72, 0x61, 0x70, 0x68, 0x65, 0x6d, 0x61, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x12,
	0x30, 0x0a, 0x05, 0x67, 0x61, 0x6d, 0x6d, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x54,
	0x79, 0x70, 0x65, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x48, 0x00, 0x52, 0x05, 0x67, 0x61, 0x6d, 0x6d,
	0x61, 0x42, 0x0a, 0x0a, 0x08, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x22, 0x17, 0x0a,
	0x15, 0x54, 0x61, 0x73, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x47, 0x72, 0x61, 0x70, 0x68, 0x65, 0x6d,
	0x61, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x22, 0x0f, 0x0a, 0x0d, 0x54, 0x61, 0x73, 0x6b, 0x54, 0x79,
	0x70, 0x65, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x22, 0x67, 0x0a, 0x0a, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x27, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2e,
	0x54, 0x61, 0x73, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x69,
	0x6e, 0x70, 0x75, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79,
	0x22, 0x81, 0x01, 0x0a, 0x0e, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x2d, 0x0a, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x05, 0x69,
	0x6e, 0x70, 0x75, 0x74, 0x22, 0x64, 0x0a, 0x08, 0x45, 0x64, 0x69, 0x74, 0x54, 0x61, 0x73, 0x6b,
	0x12, 0x17, 0x0a, 0x07, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x34, 0x0a, 0x06, 0x6f, 0x75, 0x74,
	0x70, 0x75, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x48, 0x00, 0x52, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x88, 0x01, 0x01, 0x42,
	0x09, 0x0a, 0x07, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x42, 0x78, 0x0a, 0x2e, 0x72, 0x75,
	0x2e, 0x74, 0x65, 0x78, 0x74, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2e, 0x74, 0x61,
	0x77, 0x74, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x50, 0x01, 0x5a, 0x44,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x42, 0x45, 0x54, 0x45, 0x50,
	0x4f, 0x4b, 0x33, 0x2f, 0x74, 0x61, 0x77, 0x74, 0x2d, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x72, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x67, 0x6f,
	0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x3b, 0x73, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x72, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_scheduler_types_proto_rawDescOnce sync.Once
	file_scheduler_types_proto_rawDescData = file_scheduler_types_proto_rawDesc
)

func file_scheduler_types_proto_rawDescGZIP() []byte {
	file_scheduler_types_proto_rawDescOnce.Do(func() {
		file_scheduler_types_proto_rawDescData = protoimpl.X.CompressGZIP(file_scheduler_types_proto_rawDescData)
	})
	return file_scheduler_types_proto_rawDescData
}

var file_scheduler_types_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_scheduler_types_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_scheduler_types_proto_goTypes = []interface{}{
	(Task_Status)(0),              // 0: scheduler.Task.Status
	(*Task)(nil),                  // 1: scheduler.Task
	(*TaskType)(nil),              // 2: scheduler.TaskType
	(*TaskTypeGraphematical)(nil), // 3: scheduler.TaskTypeGraphematical
	(*TaskTypeGamma)(nil),         // 4: scheduler.TaskTypeGamma
	(*CreateTask)(nil),            // 5: scheduler.CreateTask
	(*TaskStreamData)(nil),        // 6: scheduler.TaskStreamData
	(*EditTask)(nil),              // 7: scheduler.EditTask
	(*structpb.Struct)(nil),       // 8: google.protobuf.Struct
}
var file_scheduler_types_proto_depIdxs = []int32{
	2, // 0: scheduler.Task.type:type_name -> scheduler.TaskType
	0, // 1: scheduler.Task.status:type_name -> scheduler.Task.Status
	3, // 2: scheduler.TaskType.graphematical:type_name -> scheduler.TaskTypeGraphematical
	4, // 3: scheduler.TaskType.gamma:type_name -> scheduler.TaskTypeGamma
	2, // 4: scheduler.CreateTask.type:type_name -> scheduler.TaskType
	2, // 5: scheduler.TaskStreamData.type:type_name -> scheduler.TaskType
	8, // 6: scheduler.TaskStreamData.input:type_name -> google.protobuf.Struct
	8, // 7: scheduler.EditTask.output:type_name -> google.protobuf.Struct
	8, // [8:8] is the sub-list for method output_type
	8, // [8:8] is the sub-list for method input_type
	8, // [8:8] is the sub-list for extension type_name
	8, // [8:8] is the sub-list for extension extendee
	0, // [0:8] is the sub-list for field type_name
}

func init() { file_scheduler_types_proto_init() }
func file_scheduler_types_proto_init() {
	if File_scheduler_types_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_scheduler_types_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Task); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scheduler_types_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scheduler_types_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskTypeGraphematical); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scheduler_types_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskTypeGamma); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scheduler_types_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateTask); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scheduler_types_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskStreamData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scheduler_types_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EditTask); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_scheduler_types_proto_msgTypes[0].OneofWrappers = []interface{}{}
	file_scheduler_types_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*TaskType_Graphematical)(nil),
		(*TaskType_Gamma)(nil),
	}
	file_scheduler_types_proto_msgTypes[6].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_scheduler_types_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_scheduler_types_proto_goTypes,
		DependencyIndexes: file_scheduler_types_proto_depIdxs,
		EnumInfos:         file_scheduler_types_proto_enumTypes,
		MessageInfos:      file_scheduler_types_proto_msgTypes,
	}.Build()
	File_scheduler_types_proto = out.File
	file_scheduler_types_proto_rawDesc = nil
	file_scheduler_types_proto_goTypes = nil
	file_scheduler_types_proto_depIdxs = nil
}
