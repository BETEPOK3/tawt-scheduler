// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: scheduler/tasks.proto

package scheduler

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TasksClient is the client API for Tasks service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TasksClient interface {
	// GetTaskById - получить задачу по идентификатору.
	GetTaskById(ctx context.Context, in *GetTaskByIdRequest, opts ...grpc.CallOption) (*GetTaskByIdResponse, error)
	// GetTaskStream - получить поток задач на обработку.
	GetTaskStream(ctx context.Context, in *GetTaskStreamRequest, opts ...grpc.CallOption) (Tasks_GetTaskStreamClient, error)
	// CreateTask - создать задачу.
	CreateTask(ctx context.Context, in *CreateTaskRequest, opts ...grpc.CallOption) (*CreateTaskResponse, error)
	// EditTask - редактировать задачу.
	EditTask(ctx context.Context, in *EditTaskRequest, opts ...grpc.CallOption) (*EditTaskResponse, error)
}

type tasksClient struct {
	cc grpc.ClientConnInterface
}

func NewTasksClient(cc grpc.ClientConnInterface) TasksClient {
	return &tasksClient{cc}
}

func (c *tasksClient) GetTaskById(ctx context.Context, in *GetTaskByIdRequest, opts ...grpc.CallOption) (*GetTaskByIdResponse, error) {
	out := new(GetTaskByIdResponse)
	err := c.cc.Invoke(ctx, "/scheduler.Tasks/GetTaskById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tasksClient) GetTaskStream(ctx context.Context, in *GetTaskStreamRequest, opts ...grpc.CallOption) (Tasks_GetTaskStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &Tasks_ServiceDesc.Streams[0], "/scheduler.Tasks/GetTaskStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &tasksGetTaskStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Tasks_GetTaskStreamClient interface {
	Recv() (*GetTaskStreamResponse, error)
	grpc.ClientStream
}

type tasksGetTaskStreamClient struct {
	grpc.ClientStream
}

func (x *tasksGetTaskStreamClient) Recv() (*GetTaskStreamResponse, error) {
	m := new(GetTaskStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *tasksClient) CreateTask(ctx context.Context, in *CreateTaskRequest, opts ...grpc.CallOption) (*CreateTaskResponse, error) {
	out := new(CreateTaskResponse)
	err := c.cc.Invoke(ctx, "/scheduler.Tasks/CreateTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tasksClient) EditTask(ctx context.Context, in *EditTaskRequest, opts ...grpc.CallOption) (*EditTaskResponse, error) {
	out := new(EditTaskResponse)
	err := c.cc.Invoke(ctx, "/scheduler.Tasks/EditTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TasksServer is the server API for Tasks service.
// All implementations should embed UnimplementedTasksServer
// for forward compatibility
type TasksServer interface {
	// GetTaskById - получить задачу по идентификатору.
	GetTaskById(context.Context, *GetTaskByIdRequest) (*GetTaskByIdResponse, error)
	// GetTaskStream - получить поток задач на обработку.
	GetTaskStream(*GetTaskStreamRequest, Tasks_GetTaskStreamServer) error
	// CreateTask - создать задачу.
	CreateTask(context.Context, *CreateTaskRequest) (*CreateTaskResponse, error)
	// EditTask - редактировать задачу.
	EditTask(context.Context, *EditTaskRequest) (*EditTaskResponse, error)
}

// UnimplementedTasksServer should be embedded to have forward compatible implementations.
type UnimplementedTasksServer struct {
}

func (UnimplementedTasksServer) GetTaskById(context.Context, *GetTaskByIdRequest) (*GetTaskByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTaskById not implemented")
}
func (UnimplementedTasksServer) GetTaskStream(*GetTaskStreamRequest, Tasks_GetTaskStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method GetTaskStream not implemented")
}
func (UnimplementedTasksServer) CreateTask(context.Context, *CreateTaskRequest) (*CreateTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTask not implemented")
}
func (UnimplementedTasksServer) EditTask(context.Context, *EditTaskRequest) (*EditTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditTask not implemented")
}

// UnsafeTasksServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TasksServer will
// result in compilation errors.
type UnsafeTasksServer interface {
	mustEmbedUnimplementedTasksServer()
}

func RegisterTasksServer(s grpc.ServiceRegistrar, srv TasksServer) {
	s.RegisterService(&Tasks_ServiceDesc, srv)
}

func _Tasks_GetTaskById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTaskByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TasksServer).GetTaskById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/scheduler.Tasks/GetTaskById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TasksServer).GetTaskById(ctx, req.(*GetTaskByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tasks_GetTaskStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetTaskStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TasksServer).GetTaskStream(m, &tasksGetTaskStreamServer{stream})
}

type Tasks_GetTaskStreamServer interface {
	Send(*GetTaskStreamResponse) error
	grpc.ServerStream
}

type tasksGetTaskStreamServer struct {
	grpc.ServerStream
}

func (x *tasksGetTaskStreamServer) Send(m *GetTaskStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Tasks_CreateTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TasksServer).CreateTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/scheduler.Tasks/CreateTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TasksServer).CreateTask(ctx, req.(*CreateTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tasks_EditTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EditTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TasksServer).EditTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/scheduler.Tasks/EditTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TasksServer).EditTask(ctx, req.(*EditTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Tasks_ServiceDesc is the grpc.ServiceDesc for Tasks service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Tasks_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "scheduler.Tasks",
	HandlerType: (*TasksServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetTaskById",
			Handler:    _Tasks_GetTaskById_Handler,
		},
		{
			MethodName: "CreateTask",
			Handler:    _Tasks_CreateTask_Handler,
		},
		{
			MethodName: "EditTask",
			Handler:    _Tasks_EditTask_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetTaskStream",
			Handler:       _Tasks_GetTaskStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "scheduler/tasks.proto",
}
