// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: scheduler/tasks.proto

package scheduler

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TasksServiceClient is the client API for TasksService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TasksServiceClient interface {
	// GetTaskById - получить задачу по идентификатору.
	GetTaskById(ctx context.Context, in *GetTaskByIdRequest, opts ...grpc.CallOption) (*GetTaskByIdResponse, error)
	// GetTaskStream - получить поток задач на обработку.
	GetTaskStream(ctx context.Context, in *GetTaskStreamRequest, opts ...grpc.CallOption) (TasksService_GetTaskStreamClient, error)
	// CreateTask - создать задачу.
	CreateTask(ctx context.Context, in *CreateTaskRequest, opts ...grpc.CallOption) (*CreateTaskResponse, error)
	// EditTask - редактировать задачу.
	EditTask(ctx context.Context, in *EditTaskRequest, opts ...grpc.CallOption) (*EditTaskResponse, error)
}

type tasksServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTasksServiceClient(cc grpc.ClientConnInterface) TasksServiceClient {
	return &tasksServiceClient{cc}
}

func (c *tasksServiceClient) GetTaskById(ctx context.Context, in *GetTaskByIdRequest, opts ...grpc.CallOption) (*GetTaskByIdResponse, error) {
	out := new(GetTaskByIdResponse)
	err := c.cc.Invoke(ctx, "/scheduler.TasksService/GetTaskById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tasksServiceClient) GetTaskStream(ctx context.Context, in *GetTaskStreamRequest, opts ...grpc.CallOption) (TasksService_GetTaskStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &TasksService_ServiceDesc.Streams[0], "/scheduler.TasksService/GetTaskStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &tasksServiceGetTaskStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TasksService_GetTaskStreamClient interface {
	Recv() (*GetTaskStreamResponse, error)
	grpc.ClientStream
}

type tasksServiceGetTaskStreamClient struct {
	grpc.ClientStream
}

func (x *tasksServiceGetTaskStreamClient) Recv() (*GetTaskStreamResponse, error) {
	m := new(GetTaskStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *tasksServiceClient) CreateTask(ctx context.Context, in *CreateTaskRequest, opts ...grpc.CallOption) (*CreateTaskResponse, error) {
	out := new(CreateTaskResponse)
	err := c.cc.Invoke(ctx, "/scheduler.TasksService/CreateTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tasksServiceClient) EditTask(ctx context.Context, in *EditTaskRequest, opts ...grpc.CallOption) (*EditTaskResponse, error) {
	out := new(EditTaskResponse)
	err := c.cc.Invoke(ctx, "/scheduler.TasksService/EditTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TasksServiceServer is the server API for TasksService service.
// All implementations should embed UnimplementedTasksServiceServer
// for forward compatibility
type TasksServiceServer interface {
	// GetTaskById - получить задачу по идентификатору.
	GetTaskById(context.Context, *GetTaskByIdRequest) (*GetTaskByIdResponse, error)
	// GetTaskStream - получить поток задач на обработку.
	GetTaskStream(*GetTaskStreamRequest, TasksService_GetTaskStreamServer) error
	// CreateTask - создать задачу.
	CreateTask(context.Context, *CreateTaskRequest) (*CreateTaskResponse, error)
	// EditTask - редактировать задачу.
	EditTask(context.Context, *EditTaskRequest) (*EditTaskResponse, error)
}

// UnimplementedTasksServiceServer should be embedded to have forward compatible implementations.
type UnimplementedTasksServiceServer struct {
}

func (UnimplementedTasksServiceServer) GetTaskById(context.Context, *GetTaskByIdRequest) (*GetTaskByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTaskById not implemented")
}
func (UnimplementedTasksServiceServer) GetTaskStream(*GetTaskStreamRequest, TasksService_GetTaskStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method GetTaskStream not implemented")
}
func (UnimplementedTasksServiceServer) CreateTask(context.Context, *CreateTaskRequest) (*CreateTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTask not implemented")
}
func (UnimplementedTasksServiceServer) EditTask(context.Context, *EditTaskRequest) (*EditTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditTask not implemented")
}

// UnsafeTasksServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TasksServiceServer will
// result in compilation errors.
type UnsafeTasksServiceServer interface {
	mustEmbedUnimplementedTasksServiceServer()
}

func RegisterTasksServiceServer(s grpc.ServiceRegistrar, srv TasksServiceServer) {
	s.RegisterService(&TasksService_ServiceDesc, srv)
}

func _TasksService_GetTaskById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTaskByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TasksServiceServer).GetTaskById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/scheduler.TasksService/GetTaskById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TasksServiceServer).GetTaskById(ctx, req.(*GetTaskByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TasksService_GetTaskStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetTaskStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TasksServiceServer).GetTaskStream(m, &tasksServiceGetTaskStreamServer{stream})
}

type TasksService_GetTaskStreamServer interface {
	Send(*GetTaskStreamResponse) error
	grpc.ServerStream
}

type tasksServiceGetTaskStreamServer struct {
	grpc.ServerStream
}

func (x *tasksServiceGetTaskStreamServer) Send(m *GetTaskStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _TasksService_CreateTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TasksServiceServer).CreateTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/scheduler.TasksService/CreateTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TasksServiceServer).CreateTask(ctx, req.(*CreateTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TasksService_EditTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EditTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TasksServiceServer).EditTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/scheduler.TasksService/EditTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TasksServiceServer).EditTask(ctx, req.(*EditTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TasksService_ServiceDesc is the grpc.ServiceDesc for TasksService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TasksService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "scheduler.TasksService",
	HandlerType: (*TasksServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetTaskById",
			Handler:    _TasksService_GetTaskById_Handler,
		},
		{
			MethodName: "CreateTask",
			Handler:    _TasksService_CreateTask_Handler,
		},
		{
			MethodName: "EditTask",
			Handler:    _TasksService_EditTask_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetTaskStream",
			Handler:       _TasksService_GetTaskStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "scheduler/tasks.proto",
}
